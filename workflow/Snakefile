configfile: "config/config.yaml"
# make output file for each organism
def get_final_output(wc):
    for org in config["genomes"]:
        yield f"results/structures/{org}.tsv.gz"

rule all:
    input: get_final_output

# extract the miRNA precursors sequences using the seq and ann files
rule extract_precursors:
    input: 
        seq=lambda wc: config["genomes"][wc.org]["seq"],
        ann=lambda wc: config["genomes"][wc.org]["ann"],
    output:
        "results/precursors/{org}.fa.gz"
    params:
        nseqs=config['nseqs'] 
    log: 
        stdout="logs/1_extract_precursors/extract_precursors_{org}.stdout", 
        stderr="logs/1_extract_precursors/extract_precursors_{org}.stderr"
    conda: "envs/extract_precursors.yaml"
    # extract precursors
    shell: """
    echo "Extract precursors for {wildcards.org}..."
    python3 workflow/scripts/extract_precursors.py {input} {params.nseqs} {output} \
    > {log.stdout} 2> {log.stderr} 
    """

# predict the structure for all sequences in the fasta file (dot-bracket format)
rule predict_structure:
    input:
        "results/precursors/{org}.fa.gz"
    output:
        "results/structures/{org}.out.gz"
    params:
        par_in="results/precursors/{org}.fa",
        par_out="results/structures/{org}.out"
    log: 
        "logs/2_predict_structure/predict_structure_{org}.std", 
    conda: "envs/predict_structure.yaml"
    # predict the structure using viennRNA
    shell: """
        echo "Predict structures for {wildcards.org}..." 
        gzip -d {input}
        echo "" > {params.par_out}
        RNAfold --noPS --infile={params.par_in}  > {params.par_out} 2> {log} 
        gzip {params.par_out}
        echo "Predict structures finished"
    """

# convert the predictions output to a tsv file
# columns: sequence_id\tsequence\tstructure\tmfe
rule convert_to_tsv:
    input:
        "results/structures/{org}.out.gz"
    output:
        "results/structures/{org}.tsv.gz"
    log: 
        stdout="logs/3_convert_to_csv/convert_to_csv_{org}.stdout", 
        stderr="logs/3_convert_to_csv/convert_to_csv_{org}.stderr"
    # convert the structures output to tsv
    shell: """
    echo "Converting to tsv format for {wildcards.org}..." 
    python3 workflow/scripts/convert_to_tsv.py {input} {output}  > {log.stdout} 2> {log.stderr}
    echo "Result is in {output}." 
    """

