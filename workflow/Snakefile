configfile: "config/config.yaml"
# make output file for each organism
def get_final_output(wc):
    for org in config["genomes"]:
        yield f"results/structures/{org}.tsv.gz"

rule all:
    input: get_final_output

# extract the miRNA precursors sequences using the seq and ann files
rule extract_precursors:
    input: 
        seq=lambda wc: config["genomes"][wc.org]["seq"],
        ann=lambda wc: config["genomes"][wc.org]["ann"], #TODO: add path to annotations file
    output:
        "results/precursors/{org}.fa.gz"
    log: "logs/extract_precursors_{org}.log" #TODO: add logging
    conda: "envs/extract_precursors.yaml"
    #TODO: implement the script (you may use an R script instead)
    script: "workflow/scripts/extract_precursors.py > {log} 2>&1 "

# predict the structure for all sequences in the fasta file (dot-bracket format)
rule predict_structure:
    input:
        "results/precursors/{org}.fa.gz"
    output:
        "results/structures/{org}.out.gz"
    log: "logs/predict_structure_{org}.log"   #TODO: add logging
    conda: "envs/predict_structure.yaml"
    #TODO: write shell code to process structures
    #      you may choose to use a 'script' directive instead
    shell: """
        echo "Here we predict structures for {wildcards.org}" > {log} 2>&1
        gunzip {input}
        RNAfold --noPS -i {input[:-3]} > {output[:-3]}  > {log} 2>&1 
        gzip {output[:-3]} > {output}
    """

# convert the predictions output to a tsv file
# columns: sequence_id\tsequence\tstructure\tmfe
rule convert_to_tsv:
    input:
        "results/structures/{org}.out.gz"
    output:
        "results/structures/{org}.tsv.gz"
    log: "logs/convert_to_csv_{org}.log" #TODO: add logging
    #TODO: write shell code to convert the structures output to tsv
    script: "workflow/scripts/convert_to_tsv.py > {log} 2>&1 "

